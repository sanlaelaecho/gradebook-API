const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app')
const server = app.listen(5050, ()=> console.log(`Flying even lower to Port 5050`))
const User = require('../models/user')
const Cohort = require('../models/cohort')
const Subject = require('../models/subject')
const Assignment = require('../models/assignment')
let mongoServer

beforeAll(async() => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async() => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test all assignment endpoints', () => {

    // router.post('/', userController.auth, assignmentCtrl.create)
    test('It should create an assignment', async() => {
        const user = new User({ lastName: 'teacher', email: 'teacher@school.com', password: 'teacher', role: 'teacher' })
        await user.save()
        const csSubject = new Subject({ name: 'Computer Science' })
        await csSubject.save()
        const csCohort = new Cohort({ name: 'Intro to CS', subject: csSubject._id })
        await csCohort.save()
        const token = await user.generateAuthToken()
        const response = await request(app)
            .post(`/assignments`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ name: 'CS basics HW', cohort: csCohort._id, due_date: '2023-07-11' })
        expect(response.statusCode).toBe(200)
        expect(response.body.name).toEqual('CS basics HW')
        expect(response.body.due_date).toEqual('2023-07-11T00:00:00.000Z')
        expect.objectContaining(csCohort)
    })

    // router.put('/:id', userController.auth, assignmentCtrl.update)
    test('It should update an assignment', async() => {
        const user = new User({ lastName: 'teacher1', email: 'teacher1@school.com', password: 'teacher', role: 'teacher' })
        await user.save()
        const token = await user.generateAuthToken()
        const archSubject = new Subject({ name: 'Architecture' })
        await archSubject.save()
        const archCohort = new Cohort({ name: 'History of Architecture', subject: archSubject._id })
        await archCohort.save()
        const archAssignment = new Assignment({ name: 'History of famous Architecture', cohort: archCohort._id, due_date: '2023-07-07' })
        await archAssignment.save()
        const response = await request(app)
            .put(`/assignments/${archAssignment._id}`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ name: 'Stories of famous architects in history' })
        expect(response.statusCode).toBe(200)
        expect(response.body.name).toEqual('Stories of famous architects in history')
        expect(response.body.due_date).toEqual('2023-07-07T00:00:00.000Z')
        expect.objectContaining(archCohort)
    })

    // router.get('/:id', assignmentCtrl.getOne)
    test('It should show one assignment', async() => {
        const aeroSubject = new Subject({ name: 'AeroDynamics' })
        await aeroSubject.save()
        const aeroCohort = new Cohort({ name: 'AeroPhysics', subject: aeroSubject._id })
        await aeroCohort.save()
        const aeroAssignment = new Assignment({ name: 'Fluid mechanics', cohort: aeroCohort._id, due_date: '2023-08-01' })
        await aeroAssignment.save()
        const response = await request(app)
            .get(`/assignments/${aeroAssignment._id}`)
        expect(response.statusCode).toBe(200)
        expect(response.body.name).toEqual('Fluid mechanics')
        expect(response.body.due_date).toEqual('2023-08-01T00:00:00.000Z')
        expect.objectContaining(aeroCohort)
    })

    // router.delete('/:id', userController.auth, assignmentCtrl.delete)
    test('It should delete an assignment', async() => {
        const user = new User({ lastName: 'teacher2', email: 'teacher2@school.com', password: 'teacher', role: 'teacher' })
        await user.save()
        const token = await user.generateAuthToken()
        const libSubject = new Subject({ name: 'Liberal Arts' })
        await libSubject.save()
        const libCohort = new Cohort({ name: 'Philosophy', subject: libSubject._id })
        await libCohort.save()
        const libAssignment = new Assignment({ name: 'Philosophical Bibliography', cohort: libCohort._id, due_date: '2023-07-23' })
        await libAssignment.save()
        const response = await request(app)
            .delete(`/assignments/${libAssignment._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(204)
    })

})