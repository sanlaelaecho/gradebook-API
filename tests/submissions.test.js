const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app')
const server = app.listen(1010, () => console.log(`Landing at final stop PORT 1010`))
const Submission = require('../models/submission')
const Assignment = require('../models/assignment')
const Cohort = require('../models/cohort')
const Subject = require('../models/subject')
const User = require('../models/user')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test the submission endpoints', () => {
    // router.post('/', userController.auth, submissionCtrl.create)
    test('It should allow a student to create a new submission', async () => {
        const csSubject = new Subject({ name: 'Computer Science'})
        await csSubject.save()
        const teacher = new User({ lastName: 'teacher1', email: 'teacher1@school.com', password: 'teacherteacher', role: 'teacher' })
        await teacher.save()
        const csCohort = new Cohort({ name: 'CS100', subject: csSubject._id, user: teacher._id })
        await csCohort.save()
        const assignmentToSubmit = new Assignment({ name: 'CS homework1', cohort: csCohort._id, due_date: '2023-07-11' })
        await assignmentToSubmit.save()
        const student = new User({ lastName: 'student1', email: 'student1@school.com', password: 'student1', role: 'student' })
        await student.save()
        const token = await student.generateAuthToken()
        const response = await request(app)
            .post('/submissions')
            .set(`Authorization`, `Bearer ${token}`)
            .send({ assignment: assignmentToSubmit._id, student: student._id })
        expect(response.statusCode).toBe(200)
        expect.objectContaining(assignmentToSubmit)
        expect.objectContaining(student)
        expect(response.body.pastDueDate).toEqual(false)
        expect(response.body.submitted).toEqual(false)
    })

    // router.put('/grade/:id', userController.auth, submissionCtrl.grade)
    test('It should allow a teacher to grade an assignment submission', async() => {
        const teacher = new User({ lastName: 'teacher2', email: 'teacher2@school.com', password: 'teacher', role: 'teacher' })
        await teacher.save()
        const token = await teacher.generateAuthToken()
        const archSubject = new Subject({ name: 'Architecture' })
        await archSubject.save()
        const archCohort = new Cohort({ name: 'Modernism Architecture', subject: archSubject._id })
        await archCohort.save()
        const archAssignment = new Assignment({ name: 'Modernism in Today research paper', cohort: archCohort._id, due_date: '2023-07-23' })
        await archAssignment.save()
        const student = new User({ lastName: 'student2', email: 'student2@school.com', password: 'student', role: 'student' })
        await student.save()
        const archSubmission = new Submission({ assignment: archAssignment._id, student: student._id, submitted: true })
        await archSubmission.save()
        const response = await request(app)
            .put(`/submissions/grade/${archSubmission._id}`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({grade: 'B'})
        expect(response.statusCode).toBe(200)
        expect(response.body.grade).toEqual('B')
        expect(response.body.pastDueDate).toEqual(false)
        expect(response.body.submitted).toEqual(true)
        expect.objectContaining(archAssignment)
        expect.objectContaining(student)
    })

    // router.post('/:id', userController.auth, submissionCtrl.submit)
    test('It should submit a submission from a student to an assignment', async() => {
        const lawSubject = new Subject({ name: 'Law' })
        await lawSubject.save()
        const lawCohort = new Cohort({ name: 'Injustice in Court', subject: lawSubject._id })
        await lawCohort.save()
        const lawAssignment = new Assignment({ name: 'Recent cases', cohort: lawCohort._id, due_date: '2023-07-13' })
        await lawAssignment.save()
        const student = new User({ lastName: 'student3', email: 'student3@school.com', password: 'student', role: 'student' })
        await student.save()
        const token = await student.generateAuthToken()
        const lawSubmission = new Submission({assignment: lawAssignment._id, student: student._id})
        await lawSubmission.save()
        const response = await request(app)
            .post(`/submissions/${lawSubmission._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(lawSubmission)
        expect(response.body.submitted).toEqual(true)
    })

    // router.get('/submitted', userController.auth, submissionCtrl.indexSubmitted)
    test('It should get all submitted submissions of the assignment for the teacher', async() => {
        const teacher = new User({ lastName: 'teacher3', email: 'teacher3@school.com', password: 'teacher', role: 'teacher' })
        await teacher.save()
        const token = await teacher.generateAuthToken()
        const archSubject = new Subject({ name: 'Architecture' })
        await archSubject.save()
        const archCohort = new Cohort({ name: 'Minimalism Architecture', subject: archSubject._id })
        await archCohort.save()
        const archAssignment = new Assignment({ name: 'Minimalistic Design and its effects on society', cohort: archCohort._id, due_date: '2023-07-23' })
        await archAssignment.save()
        const student = new User({ lastName: 'student4', email: 'student4@school.com', password: 'student', role: 'student' })
        await student.save()
        const archSubmission = new Submission({ assignment: archAssignment._id, student: student._id, submitted: true })
        await archSubmission.save()
        const archSubmission2 = new Submission({ assignment: archAssignment._id, student: student._id, submitted: true })
        await archSubmission2.save()
        const response = await request(app)
            .get(`/submissions/submitted`)
            .set(`Authorization`,`Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(archSubmission)
        expect.objectContaining(archSubmission2)
    })

    // router.get('/notsubmitted', userController.auth, submissionCtrl.indexNotSubmitted)
    test('It should show all submissions not yet submitted or finished to the teacher', async() => {
        const teacher = new User({ lastName: 'teacher4', email: 'teacher4@school.com', password: 'teacher', role: 'teacher' })
        await teacher.save()
        const token = await teacher.generateAuthToken()
        const aeroSubject = new Subject({ name: 'AeroDynamics' })
        await aeroSubject.save()
        const aeroCohort = new Cohort({ name: 'AeroPhysics', subject: aeroSubject._id })
        await aeroCohort.save()
        const aeroAssignment = new Assignment({ name: 'Fluid mechanics', cohort: aeroCohort._id, due_date: '2023-08-01' })
        await aeroAssignment.save()
        const student = new User({ lastName: 'student5', email: 'student5@school.com', password: 'student', role: 'student' })
        await student.save()
        const aeroSubmission = new Submission({ assignment: aeroAssignment._id, student: student._id })
        await aeroSubmission.save()
        const aeroSubmission2 = new Submission({ assignment: aeroAssignment._id, student: student._id, submitted: true })
        await aeroSubmission2.save()
        const response = await request(app)
            .get(`/submissions/notsubmitted`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(aeroSubmission)
    })

    // router.put('/:id', userController.auth, submissionCtrl.update)
    test('It should allow edits on a submission by a student', async() => {
        const student = new User({ lastName: 'student6', email: 'student6@school.com', password: 'student', role: 'student' })
        await student.save()
        const token = await student.generateAuthToken()
        const libSubject = new Subject({ name: 'Liberal Arts' })
        await libSubject.save()
        const libCohort = new Cohort({ name: 'Philosophy', subject: libSubject._id })
        await libCohort.save()
        const libAssignment = new Assignment({ name: 'Mass Psychology in workforce', cohort: libCohort._id, due_date: '2023-07-23' })
        await libAssignment.save()
        const libSubmission = new Submission({ assignment: libAssignment._id, student: student._id, submitted: true })
        await libSubmission.save()
        const response = await request(app)
            .put(`/submissions/${libSubmission._id}`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ submitted: false })
        expect(response.statusCode).toBe(200)
        expect(response.body.submitted).toEqual(false)
    })
    

    // router.delete('/:id', userController.auth, submissionCtrl.delete)
    test('It should delete a submission', async() => {
        const student = new User({ lastName: 'student7', email: 'student7@school.com', password: 'student', role: 'student' })
        await student.save()
        const token = await student.generateAuthToken()
        const medSubject = new Subject({ name: 'Medicine' })
        await medSubject.save()
        const medCohort = new Cohort({ name: 'Neuroscience', subject: medSubject._id })
        await medCohort.save()
        const medAssignment = new Assignment({ name: 'Nerves and Memory', cohort: medCohort._id, due_date: '2023-07-12' })
        await medAssignment.save()
        const medSubmission = new Submission({ assignment: medAssignment._id, student: student._id, submitted: true })
        await medSubmission.save()
        const response = await request(app)
            .delete(`/submissions/${medSubmission._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(204)
    })
})

